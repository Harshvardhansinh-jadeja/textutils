{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","yellowMode","htmlFor","toggleMode","TextForm","useState","text","setText","style","color","heading","onChange","event","target","value","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","about","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oMAGe,SAASA,EAAOC,GAC3B,OACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACA,sBAAKD,UAAU,kBAAf,UAEE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMJ,UAAU,0BAElB,qBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,SACE,qBAAIL,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SAEE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,oBAEF,oBAAIF,UAAU,kBAMhB,sBAAKA,UAAU,yCAAf,UACV,uBAAOA,UAAU,mBAAmBM,QAAUP,EAAMQ,WAAYH,KAAK,WAAWC,GAAG,2BACnF,uBAAOL,UAAU,mBAAmBQ,QAAQ,yBAA5C,iCAEU,sBAAKR,UAAS,sCAA8C,UAAbD,EAAME,KAAe,OAAS,SAA7E,UACV,uBAAOD,UAAU,mBAAmBM,QAAUP,EAAMU,WAAYL,KAAK,WAAWC,GAAG,2BACnF,uBAAOL,UAAU,mBAAmBQ,QAAQ,yBAA5C,sCC5Ba,SAASE,EAASX,GAC7B,MAAuBY,mBAAS,IAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KA0CA,OACI,qCACA,sBAAKb,UAAU,YAAYc,MAAO,CAACC,MAAuB,SAAfhB,EAAME,KAAkB,QAAQ,SAA3E,UACI,6BAAKF,EAAMiB,UACX,qBAAKhB,UAAU,OAAf,SACA,0BAAUA,UAAU,eAAeiB,SAVpB,SAACC,GACpBL,EAAQK,EAAMC,OAAOC,QAS4CN,MAAO,CAACO,gBAAgC,UAAftB,EAAME,KAAkB,QAAU,UAAUc,MAAuB,SAAfhB,EAAME,KAAkB,QAAQ,SAAWmB,MAAOR,EAAMP,GAAG,QAAQiB,KAAK,QAElN,wBAAQtB,UAAU,kBAAkBM,QA/CtB,WAClB,IAAIiB,EAAUX,EAAKY,cACnBX,EAAQU,GACRxB,EAAM0B,UAAU,yBAA2B,YA4CvC,mCACA,wBAAQzB,UAAU,uBAAuBM,QA1C1B,WACnB,IAAIiB,EAAUX,EAAKc,cACnBb,EAAQU,GACRxB,EAAM0B,UAAU,yBAA2B,YAuCvC,mCACA,wBAAQzB,UAAU,sBAAsBM,QA5BvB,WAErBO,EADc,IAEdd,EAAM0B,UAAU,eAAiB,YAyB7B,wBACA,wBAAQzB,UAAU,uBAAuBM,QArC9B,WACf,IAAIM,EAAOe,SAASC,eAAe,SACnChB,EAAKiB,SACLC,UAAUC,UAAUC,UAAUpB,EAAKQ,OACnCrB,EAAM0B,UAAU,cAAgB,YAiC5B,uBACA,wBAAQzB,UAAU,yBAAyBM,QAvB1B,WACrB,IAAIiB,EAAUX,EAAKqB,MAAM,SACzBpB,EAAQU,EAAQW,KAAK,MACrBnC,EAAM0B,UAAU,sBAAwB,YAoBpC,mCAEJ,sBAAKzB,UAAU,iBAAiBc,MAAO,CAACC,MAAuB,SAAfhB,EAAME,KAAkB,QAAQ,SAAhF,UACI,8BAAIW,EAAKqB,MAAM,KAAKE,OAApB,cAAuCvB,EAAKuB,OAA5C,iBACA,8DAAiC,IAAOvB,EAAKqB,MAAM,KAAKE,OAAxD,eACA,yCACA,4BAAIvB,EAAKuB,OAAO,EAAIvB,EAAO,gCC5DxB,SAASwB,EAAMrC,GAM1B,OAEKA,EAAMsC,OAAS,sBAAKrC,UAAS,sBAAiBD,EAAMsC,MAAMjC,KAA7B,gCAAiEkC,KAAK,QAApF,UACZ,iCARW,SAACC,GAChB,IAAMC,EAAQD,EAAKb,cACf,OAAOc,EAAMC,OAAO,GAAGjB,cAAgBgB,EAAME,MAAM,GAM1CC,CAAW5C,EAAMsC,MAAMjC,QADpB,MACuCL,EAAMsC,MAAMO,OF8B3E9C,EAAO+C,aAAe,CAClB1C,MAAQ,YACR2C,MAAQ,SGgCGC,MA7Df,WAEA,IA0BA,EAAuBpC,mBAAS,SAAhC,mBAAOV,EAAP,KAAY+C,EAAZ,KACA,EAA0BrC,mBAAS,MAAnC,mBAAO0B,EAAP,KAAcY,EAAd,KAEMxB,EAAY,SAACyB,EAAQ9C,GACzB6C,EAAS,CACPL,IAAMM,EACN9C,KAAOA,IAET+C,YAAW,WACTF,EAAS,QACR,OAGH,OACE,qCAEE,cAACnD,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAOQ,WA1C1B,WACL,UAATR,GACD+C,EAAQ,QACRrB,SAASyB,KAAKtC,MAAMO,gBAAkB,UACtCI,EAAU,oBAAoB,WAC9BE,SAASxB,MAAQ,0BAGjB6C,EAAQ,SACRrB,SAASyB,KAAKtC,MAAMO,gBAAkB,QACtCI,EAAU,qBAAqB,WAC/BE,SAASxB,MAAQ,2BA+BgDI,WA1BlD,WACN,UAARN,GACD+C,EAAQ,SACRrB,SAASyB,KAAKtC,MAAMO,gBAAkB,YAGtC2B,EAAQ,SACRrB,SAASyB,KAAKtC,MAAMO,gBAAgB,YAoBlC,cAACe,EAAD,CAAOC,MAAOA,IACd,qBAAKrC,UAAU,iBAAf,SAMA,cAACU,EAAD,CAAUe,UAAWA,EAAWxB,KAAMA,EAAMe,QAAQ,gCCtD3CqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASC,eAAe,SAM1ByB,K","file":"static/js/main.5de2928b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to=\"/about\">{props.about}</Link> */}\r\n                {/* <a className=\"nav-link\" href=\"/about\">{props.about}</a> */}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n            <div className=\"form-check form-switch text-black mx-3\">\r\n  <input className=\"form-check-input\" onClick ={props.yellowMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Green background</label>\r\n</div>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark' : 'light'}`}>\r\n  <input className=\"form-check-input\" onClick ={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n// To make sure that your props is string.\r\nNavbar.propTypes = {title : PropTypes.string.isRequired,\r\n                    about : PropTypes.string}\r\n\r\n// If you don't pass any value then this default will be used\r\nNavbar.defaultProps = {\r\n    title : 'set title',\r\n    about : 'About'\r\n}","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText] = useState('')\r\n\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase()\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase\" , \"success\")\r\n    }\r\n\r\n    const handleLowClick = ()=>{\r\n        let newText = text.toLowerCase()\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase\" , \"success\")\r\n\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        let text = document.getElementById('myBox')\r\n        text.select()\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Copied Text\" , \"success\")\r\n\r\n    }\r\n\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Cleared Text\" , \"success\")\r\n\r\n    }\r\n\r\n    const handleExtraSpace = () =>{\r\n        let newText = text.split(/[  ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Cleared Extra Space\" , \"success\")\r\n\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value)\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color : props.mode === 'dark' ? 'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" onChange={handleOnChange} style={{backgroundColor :props.mode === 'light' ?'white' : '#263b5a',color : props.mode === 'dark' ? 'white':'black' }} value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Uppercase </button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={handleLowClick}>Convert to LowerCase </button>\r\n            <button className=\"btn btn-danger mx-3\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-secondary mx-3\" onClick={handleExtraSpace}>Clear Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-4\" style={{color : props.mode === 'dark' ? 'white':'black'}}>\r\n            <p>{text.split(\" \").length} Words and {text.length} Characters</p>\r\n            <p>You can read this article in {0.08 * text.split(\" \").length} minutes </p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0 ? text : 'Enter Text to Preview'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase()\r\n            return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n        \r\n    }\r\n    return (\r\n        \r\n         props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n</div>\r\n    \r\n    )\r\n}\r\n","import \"./App.css\";\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\nimport React, { useState } from 'react'\nimport Alert from \"./Components/Alert\";\n// import About from \"./Components/About\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n  \n// } from \"react-router-dom\";\n\n\nfunction App() {\n  \nconst toggleMode = () =>{\n  if(mode === 'light'){\n    setMode('dark')\n    document.body.style.backgroundColor = '#2a365c'\n    showAlert(\"Dark mode Enabled\",\"success\")\n    document.title = 'TextUtils - Dark mode'\n  }\n  else{\n    setMode('light')\n    document.body.style.backgroundColor = 'white'\n    showAlert(\"Light mode Enabled\",\"success\")\n    document.title = 'TextUtils - light mode'\n\n  }\n}\n\nconst yellowMode = ()=>{\n  if(mode=== 'light'){\n    setMode('yelow')\n    document.body.style.backgroundColor = '#005214'\n  }\n  else{\n    setMode('light')\n    document.body.style.backgroundColor='white'\n  }\n}\nconst [mode,setMode] = useState('light')\nconst [alert, setAlert] = useState(null)\n\nconst showAlert = (message,type)=>{\n  setAlert({\n    msg : message,\n    type : type\n  })\n  setTimeout(() => {\n    setAlert(null)\n  }, 1500);\n}\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode}  toggleMode={toggleMode} yellowMode={yellowMode} ></Navbar>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      {/* <Switch> */}\n          {/* <Route exact path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n      <TextForm showAlert={showAlert} mode={mode} heading=\"Enter Text to analyze\"/>\n          {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App; \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}